###
# ```{rubric} Full Name Override
# ```
# ---
# Override the full name of the release.
#
# ```{literalinclude} /values.yaml
# :caption: fullname override
# :language: yaml
# :start-at: "fullnameOverride: \"ethereum\"\n"
# :end-before: "###\n"
# ```
ethereum:
  password:
    enabled: false
    keystore: ''
    value: ''
fullnameOverride: "ethereum"

###
# ```{rubric} Container image settings
# ```
# ---
# Define the image, tag and repository to be deployed.
#
# The `tag`{l=yaml} attribute overrides the image tag whose default is
# the chart `appVersion`{l=yaml}.
#
# In this repository, the image tag should match the latest released version
# of the Chart.
#
# ```{literalinclude} /values.yaml
# :caption: image
# :language: yaml
# :start-at: "image:\n"
# :end-before: "###\n"
# ```
image:
  pullPolicy: Always
  repository: edwardtheharris/ethereum-node
  tag: '0.0.1'

###
# ```{rubric} Ingress
# ```
# ---
# Configure Ingress for the service.
#
# ```{literalinclude} /values.yaml
# :caption: ingress
# :language: yaml
# :start-at: "ingress:\n"
# :end-before: "###\n"
# ```
#
# ```{code-block} yaml
# :caption: tls example
# tls:
#  - secretName: chart-example-tls
#    hosts:
#      - chart-example.local
# ```
ingress:
  annotations: {}
  className: nginx
  enabled: true
  externalIPs: []
  hosts:
  - host: ethereum.breeze-blocks.net
    paths:
    - path: /auth
      pathType: Prefix
      port: 8551
      serviceName: ethereum
    - path: /
      pathType: Prefix
      port: 8545
      serviceName: ethereum
    - path: /node
      pathType: Prefix
      port: 30303
      serviceName: ethereum
    - path: /wshost
      pathType: Prefix
      port: 8546
      serviceName: ethereum
  loadBalancerIP: ''
  secret:
    enabled: false
    crt: ''
    key: ''
  tls: []
labels:
  node: k8s07.breeze-blocks.net

###
# ```{rubric} Name Override
# ```
# ---
# Override the release name, but not quite all the way.
#
# ```{literalinclude} /values.yaml
# :caption: name override
# :language: yaml
# :start-at: "nameOverride: \"ethereum\"\n"
# :end-before: "###\n"
# ```
nameOverride: "ethereum"

###
# ```{rubric} Node Selector
# ```
# ---
# Select node(s) for workloads to run on.
#
# ```{literalinclude} /values.yaml
# :caption: affinity
# :language: yaml
# :start-at: "nodeSelector:\n"
# :end-before: "###\n"
# ```
nodeSelector:
  kubernetes.io/node: k8s07.breeze-blocks.net

###
# ```{rubric} Persistence Configuration
# ```
# ---
# Provision persistent storage if required.
#
# ```{literalinclude} /values.yaml
# :caption: persistence
# :language: yaml
# :start-at: "persistence:\n"
# :end-before: "###\n"
# ```
persistence:
  claim:
    enabled: true
  name: ethereum
  storageClass: csi-lvm-linear

###
# ```{rubric} Replica Count
# ```
# ---
# Deploy this many replicas by default.
#
# ```{literalinclude} /values.yaml
# :caption: replicas
# :language: yaml
# :start-at: "replicaCount: 1\n"
# :end-before: "###\n"
# ```
replicaCount: 1

###
# ```{rubric} Resource Requests and Limits
# ```
# ---
# Set requests and limits for workload resources.
#
# ```{literalinclude} /values.yaml
# :caption: resources
# :language: yaml
# :start-at: "resources:\n"
# :end-before: "###\n"
# ```
#
# We usually recommend not to specify default resources and to leave this as
# a conscious choice for the user. This also increases chances charts run on
# environments with little resources, such as Minikube. If you do want to
# specify resources, uncomment the following lines, adjust them as necessary,
# and remove the curly braces after `resources:`{l=yaml}.
#
# ```{code-block} yaml
# :caption: resources example
#
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi
# ```
resources:
  limits:
    cpu: 2
    memory: 4096Mi
    storage: 900Gi
  requests:
    cpu: 1
    memory: 2048Mi
    storage: 700Gi

###
# ```{rubric} Service
# ```
# ---
# Define the service used to access the application.
#
# ```{literalinclude} /values.yaml
# :caption: service
# :language: yaml
# :start-at: "service:\n"
# :end-before: "###\n"
# ```
#
# ```{code-block} yaml
# :caption: capabilities example
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000
# ```
service:
  enabled: true
  auth:
    name: auth
    port: 8551
    protocol: TCP
    targetPort: 8551
  externalIPs: []
  http:
    name: http
    port: 8545
    protocol: HTTP
    targetPort: 8545
  loadBalancerIP: ''
  node:
    name: node
    port: 30303
    protocol: TCP
    targetPort: 30303
  rpc:
    enabled: true
    name: rpc
    port: 8334
    protocol: TCP
    targetPort: 8334
  type: LoadBalancer
  wshost:
    name: wshost
    port: 8546
    protocol: TCP
    targetPort: 8546

###
# ```{rubric} Service Account
# ```
# ---
# When enabled, will create a Kubernetes Service Account during deployment.
#
# ```{literalinclude} /values.yaml
# :caption: serviceAccount
# :language: yaml
# :start-at: "serviceAccount:\n"
# :end-before: "###\n"
# ```
serviceAccount:
  # Annotations to add to the service account
  annotations:
    app.kubernetes.io/name: ethereum
    app.kubernetes.io/instance: ethereum
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname ethereum-node
  name: "ethereum"
statefulset:
  replicas: 1

###
# ```{rubric} Type
# ```
# ---
# May be set to `Deployment` or `StatefulSet`.
#
# ```{literalinclude} /values.yaml
# :caption: type
# :language: yaml
# :start-at: "type: StatefulSet\n"
# :end-before: "###\n"
# ```
type: StatefulSet
