apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.nameOverride }}
spec:
  selector:
    matchLabels:
      {{ include "ethereum.selectorLabels" . | nindent 6 }}
  serviceName: {{ .Values.nameOverride }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        {{ include "ethereum.labels" . | nindent 8 }}
    spec:
      containers:
        - name: ethereum
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.auth.port }}
              name: {{ .Values.service.auth.name }}
            - containerPort: {{ .Values.service.http.port }}
              name: {{ .Values.service.http.name }}
            - containerPort: {{ .Values.service.node.port }}
              name: {{ .Values.service.node.name }}
            - containerPort: {{ .Values.service.rpc.port }}
              name: {{ .Values.service.rpc.name }}
            - containerPort: {{ .Values.service.wshost.port }}
              name: {{ .Values.service.wshost.name }}
          volumeMounts:
            - name: {{ .Values.persistence.name }}
              mountPath: /srv/ethereum
            - name: keystore
              mountPath: /root/.ethereum/keystore/
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- end }}
      volumes:
        - name: keystore
          secret:
            secretName: ethereum-password
  volumeClaimTemplates:
  - metadata:
      name: {{ .Values.persistence.name }}
    spec:
      accessModes: [ "ReadWriteMany", "ReadWriteOnce" ]
      resources:
        limits:
          storage: {{ .Values.resources.limits.storage }}
        requests:
          storage: {{ .Values.resources.requests.storage }}
      storageClassName: {{ .Values.persistence.storageClass }}
      volumeMode: Filesystem
